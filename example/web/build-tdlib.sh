#!/bin/sh

emconfigure 2> /dev/null || { echo 'emconfigure not found. Install emsdk and add emconfigure and emmake to PATH environment variable. See instruction at https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html. Do not forget to add `emconfigure` and `emmake` to the PATH environment variable via `emsdk/emsdk_env.sh` script.'; exit 1; }

rm -rf build/generate
rm -rf build/asmjs
rm -rf build/wasm

mkdir -p build/generate
mkdir -p build/asmjs
mkdir -p build/wasm

TD_ROOT=$(realpath ../..)
BUILD_OPTIONS="-DCMAKE_BUILD_TYPE=MinSizeRel \
  -DBUILD_SHARED_LIBS=ON \
  -DEMSCRIPTEN=1"
ZLIB_LIBRARY=$(realpath ./build/crypto)
ZLIB_INCLUDE_DIR=/usr/local/opt/zlib/include
ZLIB_OPTIONS="-DZLIB_LIBRARY=$ZLIB_LIBRARY \
  -DZLIB_INCLUDE_DIR=$ZLIB_INCLUDE_DIR"

OPENSSL_ROOT=/usr/local/opt/openssl
OPENSSL_CRYPTO_LIBRARY=$OPENSSL_ROOT/lib/libcrypto.a
OPENSSL_SSL_LIBRARY=$OPENSSL_ROOT/lib/libssl.a

OPENSSL_OPTIONS="-DOPENSSL_FOUND=1 \
  -DOPENSSL_INCLUDE_DIR=$OPENSSL_ROOT/include \
  -DOPENSSL_ROOT_DIR=$OPENSSL_ROOT \
  -DOPENSSL_CRYPTO_LIBRARY=$OPENSSL_CRYPTO_LIBRARY \
  -DOPENSSL_SSL_LIBRARY=$OPENSSL_SSL_LIBRARY \
  -DOPENSSL_VERSION=1.1.0j
  -DOPENSSL_LIBRARIES=\"$OPENSSL_SSL_LIBRARY;$OPENSSL_CRYPTO_LIBRARY\""

cd build/generate
CMD="cmake $OPENSSL_OPTIONS $ZLIB_OPTIONS $TD_ROOT"
echo -e "\n$CMD\n"
$CMD || exit 1
cd ../..
echo -e "\nDONE\n"

OPENSSL_ROOT=/Users/dawud/dev/ton/libs/openssl
OPENSSL_CRYPTO_LIBRARY=$OPENSSL_ROOT/lib/libcrypto.a
OPENSSL_SSL_LIBRARY=$OPENSSL_ROOT/lib/libssl.a

OPENSSL_OPTIONS="-DOPENSSL_FOUND=1 \
  -DOPENSSL_INCLUDE_DIR=$OPENSSL_ROOT/include \
  -DOPENSSL_ROOT_DIR=$OPENSSL_ROOT \
  -DOPENSSL_CRYPTO_LIBRARY=$OPENSSL_CRYPTO_LIBRARY \
  -DOPENSSL_SSL_LIBRARY=$OPENSSL_SSL_LIBRARY \
  -DOPENSSL_VERSION=1.1.0j
  -DOPENSSL_LIBRARIES=\"$OPENSSL_SSL_LIBRARY;$OPENSSL_CRYPTO_LIBRARY\""

cd build/wasm
CMD="eval emconfigure cmake $BUILD_OPTIONS $ZLIB_OPTIONS $OPENSSL_OPTIONS $TD_ROOT"
echo -e "\n$CMD\n"
$CMD || exit 1
cd ../..
echo -e "\nDONE\n"

cd build/asmjs
CMD="eval emconfigure cmake -DASMJS=1 $BUILD_OPTIONS $ZLIB_OPTIONS $OPENSSL_OPTIONS $TD_ROOT"
echo -e "\n$CMD\n"
$CMD || exit 1
cd ../..
echo -e "\nDONE\n"

echo "Generating TDLib autogenerated source files..."
CMD="cmake --build build/generate --target prepare_cross_compiling"
echo -e "\n$CMD\n"
$CMD || exit 1
echo -e "\nDONE\n"

echo "Building TDLib to WebAssembly..."
CMD="cmake --build build/wasm --target td_wasm"
echo -e "\n$CMD\n"
$CMD || exit 1
echo -e "\nDONE\n"

echo "Building TDLib to asm.js..."
echo "Building TDLib to WebAssembly..."
CMD="cmake --build build/wasm --target td_asmjs"
echo -e "\n$CMD\n"
$CMD || exit 1
echo -e "\nDONE\n"
